** Design1 **
* 
* NI Multisim to SPICE Netlist Export
* Generated by: majed
* Sun, Jun 14, 2020 17:05:28 
*

*## Multisim Component R6 ##*
* !!!BEGIN-INTERACT
*  : delay_factor  ++++i2  ;
*  : setval        ++++f4   ;
*  : ratedval      ++++f6   ;
*  : temp_set      ++++f8   ;
*  : alpha_tc_set  ++++f10  ;
*  : beta_tc_set   ++++f12  ;
*  : tnom_set      ++++f14  ;

*  0        constant  S_OK
*  1e15     constant blown
*  0        VARIABLE Rinit
*  0        VARIABLE cnt
*  1        VARIABLE delaytime
*  0        VARIABLE S_BLOWN
*  0.0      VARIABLE resistance
*  0.0      VARIABLE resrated
*  0.0      VARIABLE restemp
*  0.0      VARIABLE restca
*  0.0      VARIABLE restcb
*  0.0      VARIABLE restnom
*  0.0      VARIABLE tempdiff
*  0.0      VARIABLE tempeffa
*  0.0      VARIABLE tempeffb
*  0.0      VARIABLE tempefft
*  0.0      VARIABLE adjresval
*  0.0      VARIABLE r1Cur
*  0.0      VARIABLE r1TPwr
*  0.0      VARIABLE r1CurAC
*  0.0      VARIABLE r1PwrAC
*  0.0      VARIABLE r1CurDC
*  0.0      VARIABLE r1PwrDC
*  0.0      VARIABLE flag
*  0        VARIABLE nTime
*  0        VARIABLE nTimeCur
*
* : DELAY
*  *delaytime  0 do
*          *cnt 1+ ==>_*cnt
*          *cnt *delaytime =  if
*          *S_BLOWN 1 + ==>_*S_BLOWN
*          0 ==>_*cnt
*          endif
*   loop
*   *S_BLOWN ==>_*animation_state
* ;
*  : R_BLOWN
*        blown resistance GRADUAL_CHANGE_AT_RUN
*  ;
*
* : RESET
*       delay_factor 10000 * ==>_*delaytime
*       setval ==>_*adjresval
*       *adjresval 2.0 f./ ==>_*Rinit
*       ratedval ==>_*resrated
*       temp_set ==>_*restemp
*       alpha_tc_set ==>_*restca
*       beta_tc_set ==>_*restcb
*       tnom_set ==>_*restnom
*       0.0 ==>_*tempdiff
*       0.0 ==>_*tempeffa
*       0.0 ==>_*tempeffb
*       0.0 ==>_*tempefft
*       0.0 ==>_*flag
*       0.0 ==>_*r1TPwr
*       S_OK   ==>_*animation_state
*       0 ==>_*S_BLOWN
*       *Rinit resistance GRADUAL_CHANGE_AT_RUN
*       1 RESET_ACDC
*       2 RESET_ACDC
*       GET_LOCAL_TIME ==>_*nTime
* ;
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*       value SET_INSTANCE Resistor ::R r2 resistance
*  ;
*  :BEGIN_PLOT
*       RESET
*  ;
*
*  : ADJUST_RESISTANCE
*      *restemp *restnom f.- ==>_*tempdiff
*      *tempdiff *restca f.* ==>_*tempeffa
*      *tempdiff *tempdiff f.* *restcb f.* ==>_*tempeffb
*      *tempeffa 1.0 f.+ *tempeffb f.+ ==>_*tempefft
*      setval *tempefft f.* ==>_*adjresval
*  ;
*
*  :OUT_DATA
*      1.0 *flag f.> if
*          ADJUST_RESISTANCE
*          GET_INSTANCE Resistor ::R R1 i  ==>_*r1Cur
*          (( *r1Cur )) 1 ADD_ACDC
*          (( *r1Cur )) 2 ADD_ACDC
*          GET_LOCAL_TIME ==>_*nTimeCur
*          *nTimeCur *nTime - 6 >= if
*          (( 1 GET_DC )) ==>_*r1CurDC
*          (( 2 GET_AC )) ==>_*r1CurAC
*          *r1CurDC *r1CurDC f.* *adjresval f.* ==>_*r1PwrDC
*          *r1CurAC *r1CurAC f.* *adjresval f.* ==>_*r1PwrAC
*          *r1PwrDC *r1PwrAC f.+ ==>_*r1TPwr
*          *nTimeCur ==>_*nTime
*          endif
*      ratedval *r1TPwr f.< if
*          1.0 ==>_*flag
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          R_BLOWN
*     endif
*     endif
*  ;
* : BEGIN_ANALYSIS
*       RESET
*  ;
*
*  1 ACDC::ALLOC_INDEX
*  2 ACDC::ALLOC_INDEX
*
* : SIMULTATION_CHANGED
*      ACDC::CIRCUIT_CHANGE
*      GET_LOCAL_TIME ==>_*nTime
*  ;
*
* !!!END-INTERACT
xR6 VCC 8 virtual_resistanceR6
.subckt virtual_resistanceR6 1 2
R1 1 3 3900000/2 pwres TEMP=27
.model pwres r(TC1=0 TC2=0 TNOM=27)
R2 3 2 3900000/2 
.ends

*## Multisim Component R5 ##*
* !!!BEGIN-INTERACT
*  : delay_factor  ++++i2  ;
*  : setval        ++++f4   ;
*  : ratedval      ++++f6   ;
*  : temp_set      ++++f8   ;
*  : alpha_tc_set  ++++f10  ;
*  : beta_tc_set   ++++f12  ;
*  : tnom_set      ++++f14  ;

*  0        constant  S_OK
*  1e15     constant blown
*  0        VARIABLE Rinit
*  0        VARIABLE cnt
*  1        VARIABLE delaytime
*  0        VARIABLE S_BLOWN
*  0.0      VARIABLE resistance
*  0.0      VARIABLE resrated
*  0.0      VARIABLE restemp
*  0.0      VARIABLE restca
*  0.0      VARIABLE restcb
*  0.0      VARIABLE restnom
*  0.0      VARIABLE tempdiff
*  0.0      VARIABLE tempeffa
*  0.0      VARIABLE tempeffb
*  0.0      VARIABLE tempefft
*  0.0      VARIABLE adjresval
*  0.0      VARIABLE r1Cur
*  0.0      VARIABLE r1TPwr
*  0.0      VARIABLE r1CurAC
*  0.0      VARIABLE r1PwrAC
*  0.0      VARIABLE r1CurDC
*  0.0      VARIABLE r1PwrDC
*  0.0      VARIABLE flag
*  0        VARIABLE nTime
*  0        VARIABLE nTimeCur
*
* : DELAY
*  *delaytime  0 do
*          *cnt 1+ ==>_*cnt
*          *cnt *delaytime =  if
*          *S_BLOWN 1 + ==>_*S_BLOWN
*          0 ==>_*cnt
*          endif
*   loop
*   *S_BLOWN ==>_*animation_state
* ;
*  : R_BLOWN
*        blown resistance GRADUAL_CHANGE_AT_RUN
*  ;
*
* : RESET
*       delay_factor 10000 * ==>_*delaytime
*       setval ==>_*adjresval
*       *adjresval 2.0 f./ ==>_*Rinit
*       ratedval ==>_*resrated
*       temp_set ==>_*restemp
*       alpha_tc_set ==>_*restca
*       beta_tc_set ==>_*restcb
*       tnom_set ==>_*restnom
*       0.0 ==>_*tempdiff
*       0.0 ==>_*tempeffa
*       0.0 ==>_*tempeffb
*       0.0 ==>_*tempefft
*       0.0 ==>_*flag
*       0.0 ==>_*r1TPwr
*       S_OK   ==>_*animation_state
*       0 ==>_*S_BLOWN
*       *Rinit resistance GRADUAL_CHANGE_AT_RUN
*       1 RESET_ACDC
*       2 RESET_ACDC
*       GET_LOCAL_TIME ==>_*nTime
* ;
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*       value SET_INSTANCE Resistor ::R r2 resistance
*  ;
*  :BEGIN_PLOT
*       RESET
*  ;
*
*  : ADJUST_RESISTANCE
*      *restemp *restnom f.- ==>_*tempdiff
*      *tempdiff *restca f.* ==>_*tempeffa
*      *tempdiff *tempdiff f.* *restcb f.* ==>_*tempeffb
*      *tempeffa 1.0 f.+ *tempeffb f.+ ==>_*tempefft
*      setval *tempefft f.* ==>_*adjresval
*  ;
*
*  :OUT_DATA
*      1.0 *flag f.> if
*          ADJUST_RESISTANCE
*          GET_INSTANCE Resistor ::R R1 i  ==>_*r1Cur
*          (( *r1Cur )) 1 ADD_ACDC
*          (( *r1Cur )) 2 ADD_ACDC
*          GET_LOCAL_TIME ==>_*nTimeCur
*          *nTimeCur *nTime - 6 >= if
*          (( 1 GET_DC )) ==>_*r1CurDC
*          (( 2 GET_AC )) ==>_*r1CurAC
*          *r1CurDC *r1CurDC f.* *adjresval f.* ==>_*r1PwrDC
*          *r1CurAC *r1CurAC f.* *adjresval f.* ==>_*r1PwrAC
*          *r1PwrDC *r1PwrAC f.+ ==>_*r1TPwr
*          *nTimeCur ==>_*nTime
*          endif
*      ratedval *r1TPwr f.< if
*          1.0 ==>_*flag
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          R_BLOWN
*     endif
*     endif
*  ;
* : BEGIN_ANALYSIS
*       RESET
*  ;
*
*  1 ACDC::ALLOC_INDEX
*  2 ACDC::ALLOC_INDEX
*
* : SIMULTATION_CHANGED
*      ACDC::CIRCUIT_CHANGE
*      GET_LOCAL_TIME ==>_*nTime
*  ;
*
* !!!END-INTERACT
xR5 8 9 virtual_resistanceR5
.subckt virtual_resistanceR5 1 2
R1 1 3 1500000/2 pwres TEMP=27
.model pwres r(TC1=0 TC2=0 TNOM=27)
R2 3 2 1500000/2 
.ends

*## Multisim Component V5 ##*
vV5 10 0 dc 0 ac 1 0
+      distof1 0 0
+      distof2 0 0
+      sin(0 0.02 1000 0 0 0)

*## Multisim Component C2 ##*
* !!!BEGIN-INTERACT
*  : delay_factor ++++i2   ;
*  : setval       ++++f4   ;
*  : ratedval     ++++f6   ;
*  : init_cond    ++++f8   ;
*  0          constant  S_OK
*  1e-15      VARIABLE  capblown
*  0.0        VARIABLE  flag
*  0.0        VARIABLE  r1Cur
*  0.0        VARIABLE  c1Voltage
*  0.0        VARIABLE  resistance
*  0          VARIABLE  cnt
*  1          VARIABLE  delaytime
*  0          VARIABLE  S_BLOWN
*
* : DELAY
*  *delaytime  0 do
*          *cnt 1+ ==>_*cnt
*          *cnt *delaytime =  if
*          *S_BLOWN 1 + ==>_*S_BLOWN
*          0 ==>_*cnt
*          endif
*   loop
*   *S_BLOWN ==>_*animation_state
* ;
*
* : RESET
*       delay_factor 10000 * ==>_*delaytime
*       0.0 ==>_*flag
*       0.0 ==>_*c1Voltage
*       0.0 ==>_*r1Cur
*       1e15 ==>_*resistance
*       S_OK   ==>_*animation_state
*       0 ==>_*S_BLOWN
* ;
*
*  :BEGIN_PLOT
*         RESET
*  ;
*
*  : C_BLOWN
*      *capblown  resistance   GRADUAL_CHANGE_AT_RUN
*  ;
*
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*     value     SET_INSTANCE Resistor ::R r1 resistance
*  ;
*
*  :OUT_DATA
*   1.0 *flag f.> if
*     GET_INSTANCE Resistor ::R r1  i  ==>_*r1Cur
*     *r1Cur f.abs 1e30 f.* ==>_*c1Voltage
*     ratedval *c1Voltage f.< if
*          1.0 ==>_*flag
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          C_BLOWN
*     endif
*   endif
*  ;
*
* :BEGIN_ANALYSIS
*     RESET
* ;
*
* !!!END-INTERACT
xC2 10 8 virtual_capC2
.subckt virtual_capC2 1 2
r1 1 2 1e30
c1 1 2 1e-006  IC=0
.ends

*## Multisim Component V4 ##*
vV4 9 0 dc 3 ac 0 0
+           distof1 0 0
+           distof2 0 0

*## Multisim Component VCC ##*
VCCVCC  VCC 0 dc 15

*## Multisim Component R4 ##*
* !!!BEGIN-INTERACT
*  : delay_factor  ++++i2  ;
*  : setval        ++++f4   ;
*  : ratedval      ++++f6   ;
*  : temp_set      ++++f8   ;
*  : alpha_tc_set  ++++f10  ;
*  : beta_tc_set   ++++f12  ;
*  : tnom_set      ++++f14  ;

*  0        constant  S_OK
*  1e15     constant blown
*  0        VARIABLE Rinit
*  0        VARIABLE cnt
*  1        VARIABLE delaytime
*  0        VARIABLE S_BLOWN
*  0.0      VARIABLE resistance
*  0.0      VARIABLE resrated
*  0.0      VARIABLE restemp
*  0.0      VARIABLE restca
*  0.0      VARIABLE restcb
*  0.0      VARIABLE restnom
*  0.0      VARIABLE tempdiff
*  0.0      VARIABLE tempeffa
*  0.0      VARIABLE tempeffb
*  0.0      VARIABLE tempefft
*  0.0      VARIABLE adjresval
*  0.0      VARIABLE r1Cur
*  0.0      VARIABLE r1TPwr
*  0.0      VARIABLE r1CurAC
*  0.0      VARIABLE r1PwrAC
*  0.0      VARIABLE r1CurDC
*  0.0      VARIABLE r1PwrDC
*  0.0      VARIABLE flag
*  0        VARIABLE nTime
*  0        VARIABLE nTimeCur
*
* : DELAY
*  *delaytime  0 do
*          *cnt 1+ ==>_*cnt
*          *cnt *delaytime =  if
*          *S_BLOWN 1 + ==>_*S_BLOWN
*          0 ==>_*cnt
*          endif
*   loop
*   *S_BLOWN ==>_*animation_state
* ;
*  : R_BLOWN
*        blown resistance GRADUAL_CHANGE_AT_RUN
*  ;
*
* : RESET
*       delay_factor 10000 * ==>_*delaytime
*       setval ==>_*adjresval
*       *adjresval 2.0 f./ ==>_*Rinit
*       ratedval ==>_*resrated
*       temp_set ==>_*restemp
*       alpha_tc_set ==>_*restca
*       beta_tc_set ==>_*restcb
*       tnom_set ==>_*restnom
*       0.0 ==>_*tempdiff
*       0.0 ==>_*tempeffa
*       0.0 ==>_*tempeffb
*       0.0 ==>_*tempefft
*       0.0 ==>_*flag
*       0.0 ==>_*r1TPwr
*       S_OK   ==>_*animation_state
*       0 ==>_*S_BLOWN
*       *Rinit resistance GRADUAL_CHANGE_AT_RUN
*       1 RESET_ACDC
*       2 RESET_ACDC
*       GET_LOCAL_TIME ==>_*nTime
* ;
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*       value SET_INSTANCE Resistor ::R r2 resistance
*  ;
*  :BEGIN_PLOT
*       RESET
*  ;
*
*  : ADJUST_RESISTANCE
*      *restemp *restnom f.- ==>_*tempdiff
*      *tempdiff *restca f.* ==>_*tempeffa
*      *tempdiff *tempdiff f.* *restcb f.* ==>_*tempeffb
*      *tempeffa 1.0 f.+ *tempeffb f.+ ==>_*tempefft
*      setval *tempefft f.* ==>_*adjresval
*  ;
*
*  :OUT_DATA
*      1.0 *flag f.> if
*          ADJUST_RESISTANCE
*          GET_INSTANCE Resistor ::R R1 i  ==>_*r1Cur
*          (( *r1Cur )) 1 ADD_ACDC
*          (( *r1Cur )) 2 ADD_ACDC
*          GET_LOCAL_TIME ==>_*nTimeCur
*          *nTimeCur *nTime - 6 >= if
*          (( 1 GET_DC )) ==>_*r1CurDC
*          (( 2 GET_AC )) ==>_*r1CurAC
*          *r1CurDC *r1CurDC f.* *adjresval f.* ==>_*r1PwrDC
*          *r1CurAC *r1CurAC f.* *adjresval f.* ==>_*r1PwrAC
*          *r1PwrDC *r1PwrAC f.+ ==>_*r1TPwr
*          *nTimeCur ==>_*nTime
*          endif
*      ratedval *r1TPwr f.< if
*          1.0 ==>_*flag
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          R_BLOWN
*     endif
*     endif
*  ;
* : BEGIN_ANALYSIS
*       RESET
*  ;
*
*  1 ACDC::ALLOC_INDEX
*  2 ACDC::ALLOC_INDEX
*
* : SIMULTATION_CHANGED
*      ACDC::CIRCUIT_CHANGE
*      GET_LOCAL_TIME ==>_*nTime
*  ;
*
* !!!END-INTERACT
xR4 VCC 7 virtual_resistanceR4
.subckt virtual_resistanceR4 1 2
R1 1 3 220/2 pwres TEMP=27
.model pwres r(TC1=0 TC2=0 TNOM=27)
R2 3 2 220/2 
.ends

*## Multisim Component Q3 ##*
xQ3 7 8 0 2N7000_2__MOS_ENH_N__1

*## Multisim Component R3 ##*
* !!!BEGIN-INTERACT
*  : delay_factor  ++++i2  ;
*  : setval        ++++f4   ;
*  : ratedval      ++++f6   ;
*  : temp_set      ++++f8   ;
*  : alpha_tc_set  ++++f10  ;
*  : beta_tc_set   ++++f12  ;
*  : tnom_set      ++++f14  ;

*  0        constant  S_OK
*  1e15     constant blown
*  0        VARIABLE Rinit
*  0        VARIABLE cnt
*  1        VARIABLE delaytime
*  0        VARIABLE S_BLOWN
*  0.0      VARIABLE resistance
*  0.0      VARIABLE resrated
*  0.0      VARIABLE restemp
*  0.0      VARIABLE restca
*  0.0      VARIABLE restcb
*  0.0      VARIABLE restnom
*  0.0      VARIABLE tempdiff
*  0.0      VARIABLE tempeffa
*  0.0      VARIABLE tempeffb
*  0.0      VARIABLE tempefft
*  0.0      VARIABLE adjresval
*  0.0      VARIABLE r1Cur
*  0.0      VARIABLE r1TPwr
*  0.0      VARIABLE r1CurAC
*  0.0      VARIABLE r1PwrAC
*  0.0      VARIABLE r1CurDC
*  0.0      VARIABLE r1PwrDC
*  0.0      VARIABLE flag
*  0        VARIABLE nTime
*  0        VARIABLE nTimeCur
*
* : DELAY
*  *delaytime  0 do
*          *cnt 1+ ==>_*cnt
*          *cnt *delaytime =  if
*          *S_BLOWN 1 + ==>_*S_BLOWN
*          0 ==>_*cnt
*          endif
*   loop
*   *S_BLOWN ==>_*animation_state
* ;
*  : R_BLOWN
*        blown resistance GRADUAL_CHANGE_AT_RUN
*  ;
*
* : RESET
*       delay_factor 10000 * ==>_*delaytime
*       setval ==>_*adjresval
*       *adjresval 2.0 f./ ==>_*Rinit
*       ratedval ==>_*resrated
*       temp_set ==>_*restemp
*       alpha_tc_set ==>_*restca
*       beta_tc_set ==>_*restcb
*       tnom_set ==>_*restnom
*       0.0 ==>_*tempdiff
*       0.0 ==>_*tempeffa
*       0.0 ==>_*tempeffb
*       0.0 ==>_*tempefft
*       0.0 ==>_*flag
*       0.0 ==>_*r1TPwr
*       S_OK   ==>_*animation_state
*       0 ==>_*S_BLOWN
*       *Rinit resistance GRADUAL_CHANGE_AT_RUN
*       1 RESET_ACDC
*       2 RESET_ACDC
*       GET_LOCAL_TIME ==>_*nTime
* ;
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*       value SET_INSTANCE Resistor ::R r2 resistance
*  ;
*  :BEGIN_PLOT
*       RESET
*  ;
*
*  : ADJUST_RESISTANCE
*      *restemp *restnom f.- ==>_*tempdiff
*      *tempdiff *restca f.* ==>_*tempeffa
*      *tempdiff *tempdiff f.* *restcb f.* ==>_*tempeffb
*      *tempeffa 1.0 f.+ *tempeffb f.+ ==>_*tempefft
*      setval *tempefft f.* ==>_*adjresval
*  ;
*
*  :OUT_DATA
*      1.0 *flag f.> if
*          ADJUST_RESISTANCE
*          GET_INSTANCE Resistor ::R R1 i  ==>_*r1Cur
*          (( *r1Cur )) 1 ADD_ACDC
*          (( *r1Cur )) 2 ADD_ACDC
*          GET_LOCAL_TIME ==>_*nTimeCur
*          *nTimeCur *nTime - 6 >= if
*          (( 1 GET_DC )) ==>_*r1CurDC
*          (( 2 GET_AC )) ==>_*r1CurAC
*          *r1CurDC *r1CurDC f.* *adjresval f.* ==>_*r1PwrDC
*          *r1CurAC *r1CurAC f.* *adjresval f.* ==>_*r1PwrAC
*          *r1PwrDC *r1PwrAC f.+ ==>_*r1TPwr
*          *nTimeCur ==>_*nTime
*          endif
*      ratedval *r1TPwr f.< if
*          1.0 ==>_*flag
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          R_BLOWN
*     endif
*     endif
*  ;
* : BEGIN_ANALYSIS
*       RESET
*  ;
*
*  1 ACDC::ALLOC_INDEX
*  2 ACDC::ALLOC_INDEX
*
* : SIMULTATION_CHANGED
*      ACDC::CIRCUIT_CHANGE
*      GET_LOCAL_TIME ==>_*nTime
*  ;
*
* !!!END-INTERACT
xR3 4 6 virtual_resistanceR3
.subckt virtual_resistanceR3 1 2
R1 1 3 1000000/2 pwres TEMP=27
.model pwres r(TC1=0 TC2=0 TNOM=27)
R2 3 2 1000000/2 
.ends

*## Multisim Component V3 ##*
vV3 5 0 dc 0 ac 1 0
+      distof1 0 0
+      distof2 0 0
+      sin(0 0.02 1000 0 0 0)

*## Multisim Component C1 ##*
* !!!BEGIN-INTERACT
*  : delay_factor ++++i2   ;
*  : setval       ++++f4   ;
*  : ratedval     ++++f6   ;
*  : init_cond    ++++f8   ;
*  0          constant  S_OK
*  1e-15      VARIABLE  capblown
*  0.0        VARIABLE  flag
*  0.0        VARIABLE  r1Cur
*  0.0        VARIABLE  c1Voltage
*  0.0        VARIABLE  resistance
*  0          VARIABLE  cnt
*  1          VARIABLE  delaytime
*  0          VARIABLE  S_BLOWN
*
* : DELAY
*  *delaytime  0 do
*          *cnt 1+ ==>_*cnt
*          *cnt *delaytime =  if
*          *S_BLOWN 1 + ==>_*S_BLOWN
*          0 ==>_*cnt
*          endif
*   loop
*   *S_BLOWN ==>_*animation_state
* ;
*
* : RESET
*       delay_factor 10000 * ==>_*delaytime
*       0.0 ==>_*flag
*       0.0 ==>_*c1Voltage
*       0.0 ==>_*r1Cur
*       1e15 ==>_*resistance
*       S_OK   ==>_*animation_state
*       0 ==>_*S_BLOWN
* ;
*
*  :BEGIN_PLOT
*         RESET
*  ;
*
*  : C_BLOWN
*      *capblown  resistance   GRADUAL_CHANGE_AT_RUN
*  ;
*
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*     value     SET_INSTANCE Resistor ::R r1 resistance
*  ;
*
*  :OUT_DATA
*   1.0 *flag f.> if
*     GET_INSTANCE Resistor ::R r1  i  ==>_*r1Cur
*     *r1Cur f.abs 1e30 f.* ==>_*c1Voltage
*     ratedval *c1Voltage f.< if
*          1.0 ==>_*flag
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          C_BLOWN
*     endif
*   endif
*  ;
*
* :BEGIN_ANALYSIS
*     RESET
* ;
*
* !!!END-INTERACT
xC1 5 4 virtual_capC1
.subckt virtual_capC1 1 2
r1 1 2 1e30
c1 1 2 1e-006  IC=0
.ends

*## Multisim Component V2 ##*
vV2 6 0 dc 3 ac 0 0
+           distof1 0 0
+           distof2 0 0

*## Multisim Component R2 ##*
* !!!BEGIN-INTERACT
*  : delay_factor  ++++i2  ;
*  : setval        ++++f4   ;
*  : ratedval      ++++f6   ;
*  : temp_set      ++++f8   ;
*  : alpha_tc_set  ++++f10  ;
*  : beta_tc_set   ++++f12  ;
*  : tnom_set      ++++f14  ;

*  0        constant  S_OK
*  1e15     constant blown
*  0        VARIABLE Rinit
*  0        VARIABLE cnt
*  1        VARIABLE delaytime
*  0        VARIABLE S_BLOWN
*  0.0      VARIABLE resistance
*  0.0      VARIABLE resrated
*  0.0      VARIABLE restemp
*  0.0      VARIABLE restca
*  0.0      VARIABLE restcb
*  0.0      VARIABLE restnom
*  0.0      VARIABLE tempdiff
*  0.0      VARIABLE tempeffa
*  0.0      VARIABLE tempeffb
*  0.0      VARIABLE tempefft
*  0.0      VARIABLE adjresval
*  0.0      VARIABLE r1Cur
*  0.0      VARIABLE r1TPwr
*  0.0      VARIABLE r1CurAC
*  0.0      VARIABLE r1PwrAC
*  0.0      VARIABLE r1CurDC
*  0.0      VARIABLE r1PwrDC
*  0.0      VARIABLE flag
*  0        VARIABLE nTime
*  0        VARIABLE nTimeCur
*
* : DELAY
*  *delaytime  0 do
*          *cnt 1+ ==>_*cnt
*          *cnt *delaytime =  if
*          *S_BLOWN 1 + ==>_*S_BLOWN
*          0 ==>_*cnt
*          endif
*   loop
*   *S_BLOWN ==>_*animation_state
* ;
*  : R_BLOWN
*        blown resistance GRADUAL_CHANGE_AT_RUN
*  ;
*
* : RESET
*       delay_factor 10000 * ==>_*delaytime
*       setval ==>_*adjresval
*       *adjresval 2.0 f./ ==>_*Rinit
*       ratedval ==>_*resrated
*       temp_set ==>_*restemp
*       alpha_tc_set ==>_*restca
*       beta_tc_set ==>_*restcb
*       tnom_set ==>_*restnom
*       0.0 ==>_*tempdiff
*       0.0 ==>_*tempeffa
*       0.0 ==>_*tempeffb
*       0.0 ==>_*tempefft
*       0.0 ==>_*flag
*       0.0 ==>_*r1TPwr
*       S_OK   ==>_*animation_state
*       0 ==>_*S_BLOWN
*       *Rinit resistance GRADUAL_CHANGE_AT_RUN
*       1 RESET_ACDC
*       2 RESET_ACDC
*       GET_LOCAL_TIME ==>_*nTime
* ;
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*       value SET_INSTANCE Resistor ::R r2 resistance
*  ;
*  :BEGIN_PLOT
*       RESET
*  ;
*
*  : ADJUST_RESISTANCE
*      *restemp *restnom f.- ==>_*tempdiff
*      *tempdiff *restca f.* ==>_*tempeffa
*      *tempdiff *tempdiff f.* *restcb f.* ==>_*tempeffb
*      *tempeffa 1.0 f.+ *tempeffb f.+ ==>_*tempefft
*      setval *tempefft f.* ==>_*adjresval
*  ;
*
*  :OUT_DATA
*      1.0 *flag f.> if
*          ADJUST_RESISTANCE
*          GET_INSTANCE Resistor ::R R1 i  ==>_*r1Cur
*          (( *r1Cur )) 1 ADD_ACDC
*          (( *r1Cur )) 2 ADD_ACDC
*          GET_LOCAL_TIME ==>_*nTimeCur
*          *nTimeCur *nTime - 6 >= if
*          (( 1 GET_DC )) ==>_*r1CurDC
*          (( 2 GET_AC )) ==>_*r1CurAC
*          *r1CurDC *r1CurDC f.* *adjresval f.* ==>_*r1PwrDC
*          *r1CurAC *r1CurAC f.* *adjresval f.* ==>_*r1PwrAC
*          *r1PwrDC *r1PwrAC f.+ ==>_*r1TPwr
*          *nTimeCur ==>_*nTime
*          endif
*      ratedval *r1TPwr f.< if
*          1.0 ==>_*flag
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          R_BLOWN
*     endif
*     endif
*  ;
* : BEGIN_ANALYSIS
*       RESET
*  ;
*
*  1 ACDC::ALLOC_INDEX
*  2 ACDC::ALLOC_INDEX
*
* : SIMULTATION_CHANGED
*      ACDC::CIRCUIT_CHANGE
*      GET_LOCAL_TIME ==>_*nTime
*  ;
*
* !!!END-INTERACT
xR2 VCC 3 virtual_resistanceR2
.subckt virtual_resistanceR2 1 2
R1 1 3 220/2 pwres TEMP=27
.model pwres r(TC1=0 TC2=0 TNOM=27)
R2 3 2 220/2 
.ends

*## Multisim Component Q2 ##*
xQ2 3 4 0 2N7000_2__MOS_ENH_N__1

*## Multisim Component R1 ##*
* !!!BEGIN-INTERACT
*  : delay_factor  ++++i2  ;
*  : setval        ++++f4   ;
*  : ratedval      ++++f6   ;
*  : temp_set      ++++f8   ;
*  : alpha_tc_set  ++++f10  ;
*  : beta_tc_set   ++++f12  ;
*  : tnom_set      ++++f14  ;

*  0        constant  S_OK
*  1e15     constant blown
*  0        VARIABLE Rinit
*  0        VARIABLE cnt
*  1        VARIABLE delaytime
*  0        VARIABLE S_BLOWN
*  0.0      VARIABLE resistance
*  0.0      VARIABLE resrated
*  0.0      VARIABLE restemp
*  0.0      VARIABLE restca
*  0.0      VARIABLE restcb
*  0.0      VARIABLE restnom
*  0.0      VARIABLE tempdiff
*  0.0      VARIABLE tempeffa
*  0.0      VARIABLE tempeffb
*  0.0      VARIABLE tempefft
*  0.0      VARIABLE adjresval
*  0.0      VARIABLE r1Cur
*  0.0      VARIABLE r1TPwr
*  0.0      VARIABLE r1CurAC
*  0.0      VARIABLE r1PwrAC
*  0.0      VARIABLE r1CurDC
*  0.0      VARIABLE r1PwrDC
*  0.0      VARIABLE flag
*  0        VARIABLE nTime
*  0        VARIABLE nTimeCur
*
* : DELAY
*  *delaytime  0 do
*          *cnt 1+ ==>_*cnt
*          *cnt *delaytime =  if
*          *S_BLOWN 1 + ==>_*S_BLOWN
*          0 ==>_*cnt
*          endif
*   loop
*   *S_BLOWN ==>_*animation_state
* ;
*  : R_BLOWN
*        blown resistance GRADUAL_CHANGE_AT_RUN
*  ;
*
* : RESET
*       delay_factor 10000 * ==>_*delaytime
*       setval ==>_*adjresval
*       *adjresval 2.0 f./ ==>_*Rinit
*       ratedval ==>_*resrated
*       temp_set ==>_*restemp
*       alpha_tc_set ==>_*restca
*       beta_tc_set ==>_*restcb
*       tnom_set ==>_*restnom
*       0.0 ==>_*tempdiff
*       0.0 ==>_*tempeffa
*       0.0 ==>_*tempeffb
*       0.0 ==>_*tempefft
*       0.0 ==>_*flag
*       0.0 ==>_*r1TPwr
*       S_OK   ==>_*animation_state
*       0 ==>_*S_BLOWN
*       *Rinit resistance GRADUAL_CHANGE_AT_RUN
*       1 RESET_ACDC
*       2 RESET_ACDC
*       GET_LOCAL_TIME ==>_*nTime
* ;
*  :GRADUAL_CHANGE_AT_RUN locals| ref value |
*       value SET_INSTANCE Resistor ::R r2 resistance
*  ;
*  :BEGIN_PLOT
*       RESET
*  ;
*
*  : ADJUST_RESISTANCE
*      *restemp *restnom f.- ==>_*tempdiff
*      *tempdiff *restca f.* ==>_*tempeffa
*      *tempdiff *tempdiff f.* *restcb f.* ==>_*tempeffb
*      *tempeffa 1.0 f.+ *tempeffb f.+ ==>_*tempefft
*      setval *tempefft f.* ==>_*adjresval
*  ;
*
*  :OUT_DATA
*      1.0 *flag f.> if
*          ADJUST_RESISTANCE
*          GET_INSTANCE Resistor ::R R1 i  ==>_*r1Cur
*          (( *r1Cur )) 1 ADD_ACDC
*          (( *r1Cur )) 2 ADD_ACDC
*          GET_LOCAL_TIME ==>_*nTimeCur
*          *nTimeCur *nTime - 6 >= if
*          (( 1 GET_DC )) ==>_*r1CurDC
*          (( 2 GET_AC )) ==>_*r1CurAC
*          *r1CurDC *r1CurDC f.* *adjresval f.* ==>_*r1PwrDC
*          *r1CurAC *r1CurAC f.* *adjresval f.* ==>_*r1PwrAC
*          *r1PwrDC *r1PwrAC f.+ ==>_*r1TPwr
*          *nTimeCur ==>_*nTime
*          endif
*      ratedval *r1TPwr f.< if
*          1.0 ==>_*flag
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          DELAY
*          R_BLOWN
*     endif
*     endif
*  ;
* : BEGIN_ANALYSIS
*       RESET
*  ;
*
*  1 ACDC::ALLOC_INDEX
*  2 ACDC::ALLOC_INDEX
*
* : SIMULTATION_CHANGED
*      ACDC::CIRCUIT_CHANGE
*      GET_LOCAL_TIME ==>_*nTime
*  ;
*
* !!!END-INTERACT
xR1 VCC 1 virtual_resistanceR1
.subckt virtual_resistanceR1 1 2
R1 1 3 220/2 pwres TEMP=27
.model pwres r(TC1=0 TC2=0 TNOM=27)
R2 3 2 220/2 
.ends

*## Multisim Component V1 ##*
vV1 2 0 dc 3 ac 0 0
+           distof1 0 0
+           distof2 0 0

*## Multisim Component Q1 ##*
xQ1 1 2 0 2N7000_2__MOS_ENH_N__1


.SUBCKT 2N7000_2__MOS_ENH_N__1 1 2 3
Cgs  2 3 12.3E-12
Cgd1 2 4 27.4E-12
Cgd2 1 4 6E-12
M1 1 2 3 3 MOST1 W=9.7m L=2u
M2 4 2 1 3 MOST2 W=9.7m L=2u
D1 3 1 Dbody
.MODEL MOST1 NMOS(Level=3 Kp=20.78u W=9.7m L=2u Rs=20m Vto=2 Rd=1.186)
.MODEL MOST2 NMOS(VTO=-4.73 Kp=20.78u W=9.7m L=2u Rs=20m)
.MODEL Dbody D(Is=125f N=1.023 Rs=1.281 Ikf=18.01 Cjo=46.3p M=.3423
+            Vj=.4519 Bv=60 Ibv=10u Tt=161.6n)
.ENDS


